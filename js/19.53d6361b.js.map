{"version":3,"file":"js/19.53d6361b.js","mappings":"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","sources":["webpack://novatool_claude/./src/components/NmeaCEPCalc.vue","webpack://novatool_claude/./src/components/NmeaCEPCalc.vue?6bba"],"sourcesContent":["<template>\n  <div class=\"p-4 space-y-4\">\n    <h1 class=\"text-xl font-bold\">NMEA CEP Í≥ÑÏÇ∞Í∏∞</h1>\n    <input type=\"file\" accept=\".txt\" @change=\"handleFileUpload\" class=\"mb-4\" />\n\n    <div v-if=\"points.length\">\n      <h2 class=\"font-semibold\">üìä ÏúÑÏπò Îç∞Ïù¥ÌÑ∞</h2>\n      <table class=\"table-auto border border-collapse w-full text-sm\">\n        <thead class=\"bg-gray-100\">\n          <tr>\n            <th class=\"border px-2\">#</th>\n            <th class=\"border px-2\">ÏúÑÎèÑ</th>\n            <th class=\"border px-2\">Í≤ΩÎèÑ</th>\n            <th class=\"border px-2\">Í±∞Î¶¨ (m)</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(p, i) in points\" :key=\"i\">\n            <td class=\"border px-2\">{{ i + 1 }}</td>\n            <td class=\"border px-2\">{{ p.lat.toFixed(6) }}</td>\n            <td class=\"border px-2\">{{ p.lon.toFixed(6) }}</td>\n            <td class=\"border px-2\">{{ p.dist.toFixed(3) }}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h2 class=\"mt-6 font-semibold\">\n        üìà Í∑∏ÎûòÌîÑ (CEP50={{ cep50.toFixed(3) }}m, CEP68={{ cep68.toFixed(3) }}m,\n        CEP95={{ cep95.toFixed(3) }}m, CEP99={{ cep99.toFixed(3) }}m)\n      </h2>\n      <canvas ref=\"chartRef\"></canvas>\n\n      <h2 class=\"mt-6 font-semibold\">üìå ÌÜµÍ≥Ñ</h2>\n      <table class=\"table-auto border border-collapse text-sm\">\n        <thead class=\"bg-gray-100\">\n          <tr>\n            <th class=\"border px-2\">ITEMS</th> \n            <th class=\"border px-2\">CEP50</th>            \n            <th class=\"border px-2\">CEP68</th>\n            <th class=\"border px-2\">CEP95</th>\n            <th class=\"border px-2\">CEP99</th>\n            <th class=\"border px-2\">ÏµúÏÜå Í±∞Î¶¨</th>            \n            <th class=\"border px-2\">ÏµúÎåÄ Í±∞Î¶¨</th>\n            <th class=\"border px-2\">ÌèâÍ∑† Í±∞Î¶¨</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td class=\"border px-2\">PACC_3D</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.cep50.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.cep68.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.cep95.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.cep99.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.min.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.max.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_3d.avg.toFixed(3) }} m</td>\n          </tr>\n          <tr>\n            <td class=\"border px-2\">PACC_H</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.cep50.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.cep68.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.cep95.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.cep99.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.min.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.max.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_h.avg.toFixed(3) }} m</td>\n          </tr><tr>\n            <td class=\"border px-2\">PACC_V</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.cep50.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.cep68.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.cep95.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.cep99.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.min.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.max.toFixed(3) }} m</td>\n            <td class=\"border px-2\">{{ accuracyTypes.pacc_v.avg.toFixed(3) }} m</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n  \n<script setup>\n  import { ref, nextTick } from 'vue'\n  import { Chart, ScatterController, LinearScale, PointElement, Title } from 'chart.js'\n  \n  Chart.register(ScatterController, LinearScale, PointElement, Title)\n  \n  const points = ref([])\n  const accuracyTypes = ref({\n  pacc_3d: { cep50: 0, cep68: 0, cep95: 0, cep99: 0, min: 0, max: 0, avg: 0 },\n  pacc_h: { cep50: 0, cep68: 0, cep95: 0, cep99: 0, min: 0, max: 0, avg: 0 },\n  pacc_v: { cep50: 0, cep68: 0, cep95: 0, cep99: 0, min: 0, max: 0, avg: 0 }\n})\n  const center = ref({ lat: 0, lon: 0 })\n  const cep50 = ref(0)\n  const cep68 = ref(0)\n  const cep95 = ref(0)\n  const cep99 = ref(0)\n  // const minDist = ref(0)\n  // const maxDist = ref(0)\n  // const avgDist = ref(0)\n  const chartRef = ref()\n  let chartInstance = null\n  \n  function handleFileUpload(event) {\n    const file = event.target.files[0]\n    if (!file) return\n    const reader = new FileReader()\n    reader.onload = () => parseNmeaAndCalculateCep(reader.result)\n    reader.readAsText(file)\n  }\n  \n  function calculate3DDistance(p1, p2) {\n    const h_dist = haversine(p1.lat, p1.lon, p2.lat, p2.lon)\n    const v_dist = Math.abs(p2.alt - p1.alt)\n    return Math.sqrt(h_dist * h_dist + v_dist * v_dist)\n  }\n\n  function calculateHDistance(p1, p2) {\n    return haversine(p1.lat, p1.lon, p2.lat, p2.lon)\n  }\n\n  function calculateVDistance(p1, p2) {\n    return Math.abs(p2.alt - p1.alt)\n  }\n\n  function calculateAccuracyStats(distances) {\n    // Ïù¥ÏÉÅÏπò Ï†úÍ±∞ (ÌèâÍ∑†ÏóêÏÑú 3 ÌëúÏ§ÄÌé∏Ï∞® Ïù¥ÏÉÅ Î≤óÏñ¥ÎÇú Í∞í)\n    const mean = distances.reduce((sum, val) => sum + val, 0) / distances.length\n    const stdDev = Math.sqrt(distances.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / distances.length)\n    const filteredDistances = distances.filter(d => Math.abs(d - mean) <= 3 * stdDev)\n    \n    const sorted = filteredDistances.sort((a, b) => a - b)\n    const len = sorted.length\n    \n    // Ï†ïÌôïÌïú Ïù∏Îç±Ïä§ Í≥ÑÏÇ∞\n    const idx50 = Math.round(len * 0.50) - 1\n    const idx68 = Math.round(len * 0.68) - 1\n    const idx95 = Math.round(len * 0.95) - 1\n    const idx99 = Math.round(len * 0.99) - 1\n    \n    return {\n        cep50: sorted[idx50] || 0,\n        cep68: sorted[idx68] || 0,\n        cep95: sorted[idx95] || 0,\n        cep99: sorted[idx99] || 0,\n        min: sorted[0] || 0,\n        max: sorted[sorted.length - 1] || 0,\n        avg: sorted.reduce((sum, v) => sum + v, 0) / len || 0\n    }\n}\n\nfunction parseNmeaAndCalculateCep(text) {\n    const lines = text.split(/\\r?\\n/)\n    const latlon = []\n    let alt = 0\n\n    for (const line of lines) {\n        let latRaw = '', latDir = '', lonRaw = '', lonDir = ''\n\n        if (line.startsWith('$GNGGA') || line.startsWith('$GPGGA')) {\n            const parts = line.split(',')\n            latRaw = parts[2]\n            latDir = parts[3]\n            lonRaw = parts[4]\n            lonDir = parts[5]\n            alt = !isNaN(parseFloat(parts[9])) ? parseFloat(parts[9]) : 0\n        } else if (line.startsWith('$GNRMC') || line.startsWith('$GPRMC')) {\n            const parts = line.split(',')\n            latRaw = parts[3]\n            latDir = parts[4]\n            lonRaw = parts[5]\n            lonDir = parts[6]\n        }\n\n        const lat = convertToDecimal(latRaw, latDir)\n        const lon = convertToDecimal(lonRaw, lonDir)\n\n        if (!isNaN(lat) && !isNaN(lon)) {\n            latlon.push({ lat, lon, alt })\n        }\n    }\n\n    if (latlon.length === 0) return\n\n    const avgLat = latlon.reduce((s, p) => s + p.lat, 0) / latlon.length\n    const avgLon = latlon.reduce((s, p) => s + p.lon, 0) / latlon.length\n    const avgAlt = latlon.reduce((s, p) => s + p.alt, 0) / latlon.length\n    center.value = { lat: avgLat, lon: avgLon, alt: avgAlt }\n\n    points.value = latlon.map(p => ({\n        lat: p.lat,\n        lon: p.lon,\n        alt: p.alt,\n        dist: haversine(avgLat, avgLon, p.lat, p.lon),\n        dist3d: calculate3DDistance(center.value, p),\n        distH: calculateHDistance(center.value, p),\n        distV: calculateVDistance(center.value, p)\n    }))\n\n    accuracyTypes.value.pacc_3d = calculateAccuracyStats(points.value.map(p => p.dist3d))\n    accuracyTypes.value.pacc_h = calculateAccuracyStats(points.value.map(p => p.distH))\n    accuracyTypes.value.pacc_v = calculateAccuracyStats(points.value.map(p => p.distV))\n\n    cep50.value = accuracyTypes.value.pacc_3d.cep50\n    cep68.value = accuracyTypes.value.pacc_3d.cep68\n    cep95.value = accuracyTypes.value.pacc_3d.cep95\n    cep99.value = accuracyTypes.value.pacc_3d.cep99\n\n    if (points.value.length > 0) {\n        nextTick(() => drawChart())\n    }\n}\n  \n  function convertToDecimal(raw, dir) {\n    const deg = parseFloat(raw.slice(0, dir === 'N' || dir === 'S' ? 2 : 3))\n    const min = parseFloat(raw.slice(dir === 'N' || dir === 'S' ? 2 : 3))\n    let dec = deg + min / 60\n    if (dir === 'S' || dir === 'W') dec *= -1\n    return dec\n  }\n  \n  function haversine(lat1, lon1, lat2, lon2) {\n    const R = 6371000\n    const toRad = deg => deg * Math.PI / 180\n    const dLat = toRad(lat2 - lat1)\n    const dLon = toRad(lon2 - lon1)\n    const a = Math.sin(dLat / 2) ** 2 +\n              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n              Math.sin(dLon / 2) ** 2\n    return 2 * R * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n  }\n  \n\n  function drawChart() {\n    if (!chartRef.value) return\n    if (chartInstance) chartInstance.destroy()\n\n  const data = points.value.map(p => ({\n    x: haversine(center.value.lat, center.value.lon, center.value.lat, p.lon) * (p.lon > center.value.lon ? 1 : -1),\n    y: haversine(center.value.lat, center.value.lon, p.lat, center.value.lon) * (p.lat > center.value.lat ? 1 : -1)\n  }))\n\n  // Find max range for square aspect ratio\n  const maxRange = Math.max(\n    ...data.map(p => Math.abs(p.x)),\n    ...data.map(p => Math.abs(p.y))\n  ) * 1.2 // Add 20% padding\n\n  chartInstance = new Chart(chartRef.value, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Position Data',\n        data,\n        backgroundColor: 'rgba(0, 0, 255, 0.6)',\n        pointRadius: 4\n      }]\n    },\n    options: {\n      aspectRatio: 1, // Make it square\n      responsive: true,\n      scales: {\n        x: {\n          title: { display: true, text: 'East-West (meters)' },\n          min: -maxRange,\n          max: maxRange,\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            drawTicks: true,\n            drawOnChartArea: true\n          },\n          ticks: {\n            stepSize: maxRange/5\n          }\n        },\n        y: {\n          title: { display: true, text: 'North-South (meters)' },\n          min: -maxRange,\n          max: maxRange,\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            drawTicks: true,\n            drawOnChartArea: true\n          },\n          ticks: {\n            stepSize: maxRange/5\n          }\n        }\n      },\n      plugins: {\n        title: { \n          display: true, \n          text: 'Position Scatter Plot with CEP Circles',\n          padding: 20\n        },\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        cepCircles: {\n          radii: [\n            {value: cep50.value, label: 'CEP50'},\n            {value: cep68.value, label: 'CEP68'},\n            {value: cep95.value, label: 'CEP95'},\n            {value: cep99.value, label: 'CEP99'}\n          ]\n        }\n      }\n    },\n    plugins: [{\n      id: 'cepCircles',\n      beforeDatasetsDraw(chart, args, pluginOptions) {\n        const { ctx, scales } = chart\n        const centerX = scales.x.getPixelForValue(0)\n        const centerY = scales.y.getPixelForValue(0)\n        const radii = pluginOptions.radii || []\n        const colors = ['red', 'blue', 'orange', 'green']\n\n        ctx.save()\n        radii.forEach((r, i) => {\n          const radiusInPixels = Math.abs(scales.x.getPixelForValue(r.value) - centerX)\n          \n          // Draw circle\n          ctx.beginPath()\n          ctx.arc(centerX, centerY, radiusInPixels, 0, 2 * Math.PI)\n          //ctx.fillStyle = colors[i]\n          //ctx.fill()\n          ctx.strokeStyle = colors[i].replace('0.2', '1.0')\n          ctx.lineWidth = 2\n          ctx.stroke()\n          \n          // 45ÎèÑ ÏúÑÏπòÏóê Î†àÏù¥Î∏î Ï∂îÍ∞Ä\n          const angle = Math.PI / 4  // 45ÎèÑ\n          const labelX = centerX + (radiusInPixels * Math.cos(angle))\n          const labelY = centerY - (radiusInPixels * Math.sin(angle))\n          \n          ctx.fillStyle = colors[i].replace('0.2', '1.0')\n          ctx.font = '12px Arial'\n          ctx.textAlign = 'left'\n          ctx.fillText(`${r.label}: ${r.value.toFixed(2)}m`, labelX, labelY)\n        })\n        ctx.restore()\n      }\n    }]\n  })\n}\n\n</script>\n  \n  <style scoped>\n  table {\n    border-collapse: collapse;\n  }\n  th, td {\n    border: 1px solid #ccc;\n    padding: 4px 6px;\n  }\n  </style>\n  ","import script from \"./NmeaCEPCalc.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NmeaCEPCalc.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./NmeaCEPCalc.vue?vue&type=style&index=0&id=7cac3f01&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7cac3f01\"]])\n\nexport default __exports__"],"names":["Chart","register","ScatterController","LinearScale","PointElement","Title","points","ref","accuracyTypes","pacc_3d","cep50","cep68","cep95","cep99","min","max","avg","pacc_h","pacc_v","center","lat","lon","chartRef","chartInstance","handleFileUpload","event","file","target","files","reader","FileReader","onload","parseNmeaAndCalculateCep","result","readAsText","calculate3DDistance","p1","p2","h_dist","haversine","v_dist","Math","abs","alt","sqrt","calculateHDistance","calculateVDistance","calculateAccuracyStats","distances","mean","reduce","sum","val","length","stdDev","pow","filteredDistances","filter","d","sorted","sort","a","b","len","idx50","round","idx68","idx95","idx99","v","text","lines","split","latlon","line","latRaw","latDir","lonRaw","lonDir","startsWith","parts","isNaN","parseFloat","convertToDecimal","push","avgLat","s","p","avgLon","avgAlt","value","map","dist","dist3d","distH","distV","nextTick","drawChart","raw","dir","deg","slice","dec","lat1","lon1","lat2","lon2","R","toRad","PI","dLat","dLon","sin","cos","atan2","destroy","data","x","y","maxRange","type","datasets","label","backgroundColor","pointRadius","options","aspectRatio","responsive","scales","title","display","grid","color","drawTicks","drawOnChartArea","ticks","stepSize","plugins","padding","legend","position","cepCircles","radii","id","beforeDatasetsDraw","chart","args","pluginOptions","ctx","centerX","getPixelForValue","centerY","colors","save","forEach","r","i","radiusInPixels","beginPath","arc","strokeStyle","replace","lineWidth","stroke","angle","labelX","labelY","fillStyle","font","textAlign","fillText","toFixed","restore","__exports__"],"sourceRoot":""}